val start=System.currentTimeMillis()
val a=sc.textFile("/root/nyse_prices/*")
val b=a.map(s=>s.split(",")
val c=b.map(s=>(s(0),s(1),s(2),s(3),s(4),s(5),s(6),s(7),s(8))
val d=c.filter(s=>(s._2!="stock_symbol"))
val e=d.filter(s=>(s._3!="date")
val e1=e.filter(s=>(s._3.contains("2009")))
val f=e1.map(s=>(s._3,(s._7.toDouble-s._4.toDouble)))
val g=f.map(s=>(s._1,(if(s._2>0){"1".toInt}else{"0".toInt})))
val h=g.map(s=>(s._1,s._2,"1".toInt))
val i=h.map(s=>(s._1,(s._2,s._3)))
val j=i.reduceByKey((a,b)=>(a._1+b._1,a._2+b._2))
val k=j.map(s=>(s._1,((s._2._1.toDouble/s._2._2.toDouble)*100)))
val l=k.map(s=>(s._1,s._2))
val m=l.map(s=>(s._1,(if(s._2>75 && s._2<=100){"A"}else if(s._2>50 && s._2<=75){"B"}else if(s._2>25 && s._2<=50){"C"}else{"D"})))
val m1=m.map(s=>((s._1.substring(0,7)),s._2))
val n=m1.map(s=>(s._1,(if(s._2=="A"){"1".toInt}else{"0".toInt}),(if(s._2=="B"){"1".toInt}else{"0".toInt}),(if(s._2=="C"){"1".toInt}else{"0".toInt}),(if(s._2=="D"){"1".toInt}else{"0".toInt}),"1".toInt))
val o=n.map(s=>(s._1,(s._2,s._3,s._4,s._5,s._6)))
val p=o.reduceByKey((a,b)=>(a._1+b._1,a._2+b._2,a._3+b._3,a._4+b._4,a._5+b._5))
val q=p.map(s=>(s._1,((s._2._1.toDouble/s._2._5.toDouble)*100),((s._2._2.toDouble/s._2._5.toDouble)*100),((s._2._3.toDouble/s._2._5.toDouble)*100),((s._2._4.toDouble/s._2._5.toDouble)*100),s._2._5))
q.foreach(println)
val end=System.currentTimeMillis()
val duration=(end-start)/1000